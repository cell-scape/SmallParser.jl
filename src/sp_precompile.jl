precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.MPFR.BigFloat, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Compat.Sys.__init__)})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Base.load_path_expand), String})
precompile(Tuple{typeof(Base.load_path)})
precompile(Tuple{getfield(Base, Symbol("#675#676")){String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#675#676")){String}, String})
precompile(Tuple{typeof(Base.project_deps_get), String, String})
precompile(Tuple{typeof(Base.identify_package), String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#683#684")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#683#684")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.manifest_uuid_path), String, Base.PkgId})
precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Module, Base.PkgId}, Any, Any})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Base.Docs.docerror), Any})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any, Bool})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.splitexpr), Expr})
precompile(Tuple{typeof(Base.Docs.bindingexpr), Any})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Docs.docstr), Any, Any})
precompile(Tuple{typeof(Base.Docs._docstr), Core.SimpleVector, Any})
precompile(Tuple{typeof(Base.:(==)), Module, WeakRef})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{getfield(Base, Symbol("#@r_str")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print_to_string), Expr})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{typeof(Base.show_unquoted_expr_fallback), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Symbol, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, String, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_block), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{getfield(Dates, Symbol("#@dateformat_str")), LineNumberNode, Module, Any})
precompile(Tuple{Type{Dates.DateFormat{Symbol("m/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}, Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}, Dates.DateLocale})
precompile(Tuple{Type{Dates.DatePart{Char(0x49000000)}}, Int64, Bool})
precompile(Tuple{Type{Dates.DatePart{Char(0x70000000)}}, Int64, Bool})
precompile(Tuple{Type{Dates.DateFormat{Symbol("II:MMpp"), Tuple{Dates.DatePart{Char(0x49000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.DatePart{Char(0x70000000)}}}}, Tuple{Dates.DatePart{Char(0x49000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.DatePart{Char(0x70000000)}}, Dates.DateLocale})
precompile(Tuple{getfield(Base, Symbol("#@ccallable")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.expand_ccallable), Nothing, Expr})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.map), Function, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#267#268")), Array{Any, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(Base, Symbol("#267#268"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(Base, Symbol("#267#268"))}})
precompile(Tuple{typeof(Base.ccallable), Function, Type{T} where T, Type{T} where T, String})
precompile(Tuple{getfield(Base, Symbol("##catch_stack#49")), Bool, typeof(Base.catch_stack), Task})
precompile(Tuple{typeof(SmallParser.julia_main)})
precompile(Tuple{typeof(Dates.character_codes), Core.SimpleVector})
precompile(Tuple{getfield(Dates, Symbol("##s661#35")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("m/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Dates.genvar), DataType})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dates, Symbol("#36#37")), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("#36#37"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("#36#37"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("#36#37"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("#36#37"))}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#33#34"))}})
precompile(Tuple{getfield(Dates, Symbol("##s662#32")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("m/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Type, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#33#34"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#33#34"))}, Int64})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("II:MMpp"), Tuple{Dates.DatePart{Char(0x49000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.DatePart{Char(0x70000000)}}}}})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dates, Symbol("#36#37")), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#36#37"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#36#37"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#36#37"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#36#37"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#36#37"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Dates.AMPM}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Dates.AMPM}, Int64, Int64})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("II:MMpp"), Tuple{Dates.DatePart{Char(0x49000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.DatePart{Char(0x70000000)}}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#33#34"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Dates.AMPM}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Dates.AMPM}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{AbstractArray{T, 1} where T}})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{Type{Base.Val{true}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{Type{Core.Compiler.Signature}, Base.BottomRF{typeof(Base.GMP.MPZ.add!)}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.join), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.split), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{String}}}, Base.RefValue{String}}}, Tuple{Int64}})
precompile(Tuple{getfield(SmallParser, Symbol("#3#4")), String})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{String, 1}, getfield(SmallParser, Symbol("#3#4"))}, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(SmallParser, Symbol("#3#4"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(SmallParser.process_broken_file), Array{String, 1}})
precompile(Tuple{typeof(Base.filter), getfield(SmallParser, Symbol("#1#2")), Array{String, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.split), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(SmallParser.process_file), String})
precompile(Tuple{typeof(Base.endswith), String, Base.SubString{String}})
precompile(Tuple{typeof(SmallParser.process_lines), Array{Array{Base.SubString{String}, 1}, 1}})
precompile(Tuple{typeof(Dates.yearmonthday), Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.RefValue{Dates.Year}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Dates.DateFormat{Symbol("m/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Dates.Time, 1}, Base.Generator{Array{Any, 1}, getfield(SmallParser, Symbol("#7#9"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(SmallParser, Symbol("#7#9"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{Dates.Time, 1}, Base.Generator{Array{Any, 1}, getfield(SmallParser, Symbol("#8#10"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(SmallParser, Symbol("#8#10"))}})
precompile(Tuple{typeof(Dates.divexact), Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Dates.Minute}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Dates.Time, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Dates.Time, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(SmallParser.fix_datetimes), Array{Any, 1}, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), String})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Symbol}, 1}, Base.Generator{Base.KeySet{Symbol, Base.Dict{Symbol, Int64}}, getfield(DataFrames, Symbol("#15#20")){String}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.KeySet{Symbol, Base.Dict{Symbol, Int64}}, getfield(DataFrames, Symbol("#15#20")){String}}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Symbol}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Symbol}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ForwardOrdering, Array{Tuple{Int64, Symbol}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#16#21")){Array{Tuple{Int64, Symbol}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#16#21")){Array{Tuple{Int64, Symbol}, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#19#24")){Int64}, Array{Tuple{Int64, Symbol}, 1}}, getfield(DataFrames, Symbol("#18#23"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#19#24")){Int64}, Array{Tuple{Int64, Symbol}, 1}}, getfield(DataFrames, Symbol("#18#23"))}})
precompile(Tuple{typeof(DataFrames.fuzzymatch), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Char, 0}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(SmallParser.summary_statistics), DataFrames.DataFrame})
precompile(Tuple{typeof(SmallParser.real_main)})
precompile(Tuple{typeof(Dates.tryparsenext_core), Base.SubString{String}, Int64, Int64, Dates.DateFormat{Symbol("m/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}, Bool})
precompile(Tuple{Type{Dates.Date}, Base.SubString{String}, Dates.DateFormat{Symbol("m/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}})
precompile(Tuple{typeof(Base.endswith), Base.SubString{String}, Base.Regex})
precompile(Tuple{typeof(Base.startswith), Base.SubString{String}, Base.Regex})
precompile(Tuple{typeof(Base._cat), Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), String, Base.SubString{String}})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.cat_t), Type{AbstractString}, String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#109")), Int64, typeof(Base.cat_t), Type{AbstractString}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Int64, Type, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{String, Base.SubString{String}}})
precompile(Tuple{typeof(Base.cat_similar), String, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{AbstractString, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{AbstractString, 1}, Tuple{Int64}, Tuple{Bool}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), String, Int64})
precompile(Tuple{typeof(Base.cat_size), String, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{AbstractString, 1, Array{AbstractString, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{AbstractString, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{AbstractString, 1, Array{AbstractString, 1}, Tuple{Base.UnitRange{Int64}}, true}, String})
precompile(Tuple{typeof(Base.cat_indices), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.cat_size), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{AbstractString, 1, Array{AbstractString, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubString{String}})
precompile(Tuple{typeof(Base.join), Array{AbstractString, 1}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Array{AbstractString, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Base.split), Base.SubString{String}, String})
precompile(Tuple{getfield(Base, Symbol("#cat##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.cat), Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat#110")), Int64, typeof(Base.cat), Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat), Int64, Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Base.SubString{String}, String})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.cat_t), Type{AbstractString}, Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#109")), Int64, typeof(Base.cat_t), Type{AbstractString}, Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Int64, Type, Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.cat_similar), Base.SubString{String}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{AbstractString, 1}, Tuple{Int64}, Tuple{Bool}, Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Dates.tryparsenext), Dates.DatePart{Char(0x70000000)}, String, Int64, Int64})
precompile(Tuple{typeof(Dates.tryparsenext_core), String, Int64, Int64, Dates.DateFormat{Symbol("II:MMpp"), Tuple{Dates.DatePart{Char(0x49000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.DatePart{Char(0x70000000)}}}, Bool})
precompile(Tuple{typeof(Dates.validargs), Type{Dates.Time}, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM})
precompile(Tuple{Type{Dates.Time}, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM})
precompile(Tuple{getfield(SmallParser, Symbol("#7#9")), String})
precompile(Tuple{typeof(Dates.tryparsenext), Dates.DatePart{Char(0x70000000)}, Base.SubString{String}, Int64, Int64})
precompile(Tuple{typeof(Dates.tryparsenext_core), Base.SubString{String}, Int64, Int64, Dates.DateFormat{Symbol("II:MMpp"), Tuple{Dates.DatePart{Char(0x49000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.DatePart{Char(0x70000000)}}}, Bool})
precompile(Tuple{getfield(SmallParser, Symbol("#7#9")), Base.SubString{String}})
precompile(Tuple{getfield(SmallParser, Symbol("#8#10")), Base.SubString{String}})
precompile(Tuple{getfield(SmallParser, Symbol("#8#10")), String})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#94#97"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{Type{Base.DimensionMismatch}, Nothing})
precompile(Tuple{typeof(Base.throw_boundserror), Array{AbstractArray{T, 1} where T, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#DataFrame#93#96")), Bool, Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#100")), Bool, Bool, Type{DataFrames.DataFrame}, Base.Pair{Symbol, Array{Dates.Date, 1}}, Vararg{Base.Pair{Symbol, #s34} where #s34, N} where N})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#101#102")), Tuple{Base.Pair{Symbol, Array{Dates.Date, 1}}, Base.Pair{Symbol, Array{Dates.Time, 1}}, Base.Pair{Symbol, Array{Dates.Time, 1}}, Base.Pair{Symbol, Array{Dates.Minute, 1}}, Base.Pair{Symbol, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.Pair{Symbol, Array{Dates.Date, 1}}, Base.Pair{Symbol, Array{Dates.Time, 1}}, Base.Pair{Symbol, Array{Dates.Time, 1}}, Base.Pair{Symbol, Array{Dates.Minute, 1}}, Base.Pair{Symbol, Array{Any, 1}}}, getfield(DataFrames, Symbol("#101#102"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#101#102")), Base.Pair{Symbol, Array{Dates.Date, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{Base.Pair{Symbol, Array{Dates.Date, 1}}, Base.Pair{Symbol, Array{Dates.Time, 1}}, Base.Pair{Symbol, Array{Dates.Time, 1}}, Base.Pair{Symbol, Array{Dates.Minute, 1}}, Base.Pair{Symbol, Array{Any, 1}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Tuple{Base.Pair{Symbol, Array{Dates.Date, 1}}, Base.Pair{Symbol, Array{Dates.Time, 1}}, Base.Pair{Symbol, Array{Dates.Time, 1}}, Base.Pair{Symbol, Array{Dates.Minute, 1}}, Base.Pair{Symbol, Array{Any, 1}}}, getfield(DataFrames, Symbol("#101#102"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Tuple{Base.Pair{Symbol, Array{Dates.Date, 1}}, Base.Pair{Symbol, Array{Dates.Time, 1}}, Base.Pair{Symbol, Array{Dates.Time, 1}}, Base.Pair{Symbol, Array{Dates.Minute, 1}}, Base.Pair{Symbol, Array{Any, 1}}}, getfield(DataFrames, Symbol("#101#102"))}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#101#102")), Base.Pair{Symbol, Array{Dates.Time, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#101#102")), Base.Pair{Symbol, Array{Dates.Minute, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#101#102")), Base.Pair{Symbol, Array{Any, 1}}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##make_unique!#1")), Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Int64}, Int64, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:makeunique,), Tuple{Bool}}, Type{DataFrames.Index}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#94#97")), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#94#97"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#94#97"))}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#94#97")), Array{Dates.Time, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#94#97")), Array{Dates.Minute, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#94#97")), Array{Any, 1}})
precompile(Tuple{typeof(Base.extrema), Array{Int64, 1}})
precompile(Tuple{typeof(Base.copy), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.copy), Array{Dates.Time, 1}})
precompile(Tuple{typeof(Base.copy), Array{Dates.Minute, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Dates.Date, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Dates.Time, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Dates.Minute, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Dates.Minute, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.sum), Array{Dates.Minute, 1}})
precompile(Tuple{typeof(Base.string), String, Dates.Minute})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.Minute})
precompile(Tuple{typeof(Base.println), Base.TTY, String})
precompile(Tuple{typeof(Base._reformat_bt), Array{Ptr{Nothing}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.catch_backtrace)})
precompile(Tuple{typeof(Distributed.flush_gc_msgs)})
precompile(Tuple{getfield(Distributed, Symbol("#131#132"))})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Dates.Minute, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Dates.Minute, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Dates.value), Tuple{Array{Dates.Minute, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Dates.value), Tuple{Array{Dates.Minute, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Dates.value), Tuple{Base.Broadcast.Extruded{Array{Dates.Minute, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dates.value), Tuple{Array{Dates.Minute, 1}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(DataAPI.describe), Array{Int64, 1}})
precompile(Tuple{typeof(Statistics._mean), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Base.UnitRange{Int64}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Statistics._quantilesort!), Array{Int64, 1}, Bool, Float64, Float64})
precompile(Tuple{getfield(Statistics, Symbol("#50#51")){Array{Int64, 1}}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Statistics, Symbol("#50#51")){Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Statistics, Symbol("#50#51")){Array{Int64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(Statistics, Symbol("##quantile#54")), Bool, typeof(Statistics.quantile), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(StatsBase.summarystats), Array{Int64, 1}})
precompile(Tuple{typeof(Printf.decode_dec), Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Printf.print_fixed), Base.TTY, Int64, Int32, Int32, Bool, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.show), Base.TTY, StatsBase.SummaryStats{Float64}})
precompile(Tuple{typeof(DataAPI.describe), Base.TTY, Array{Int64, 1}})
precompile(Tuple{Type{StatsBase.SummaryStats{Float64}}, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base._atexit)})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge), Bool})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge)})
